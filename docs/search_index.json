[["other-topics.html", "Chapter 5 Other Topics 5.1 K-nearest neighbors 5.2 MDS", " Chapter 5 Other Topics 5.1 K-nearest neighbors The kNN algorithm uses the entire training data as its “model”. So, there really is no training, however, to make predictions, this can take a long time (need to find distances from new observations to training data and find the nearest k neighbors!). The knn command in R is for classification (categorical response). ####Note: Bare has 16 missing values. From decision tree, this variable does not seem as important as the other variables, so will be dropped for this illustration. set.seed(7515) perm=sample(1:699) BC_randomOrder=BCdata[perm,] train = BC_randomOrder[1:floor(0.75*699),-c(1,7)] test = BC_randomOrder[(floor(0.75*699)+1):699,-c(1,7)] train.x=subset(train,select=-Target) train.y=as.factor(train$Target) test.x=subset(test,select=-Target) test.y=as.factor(test$Target) predict.test=knn(train.x,test.x,train.y,k=3) sum(predict.test != test.y)/175 ## [1] 0.05714286 However, we just chose the value of 3 for k. Is this the best k value? We can “tune” this parameter to find the best k… k.attempts=seq(1,15) pred.error=vector(length=15) temp.val=vector(length=20) for (i in 1:length(k.attempts)) {for (j in 1:length(temp.val)) {perm=sample(1:699) BC_randomOrder=BCdata[perm,] train = BC_randomOrder[1:floor(0.75*699),-c(1,7)] test = BC_randomOrder[(floor(0.75*699)+1):699,-c(1,7)] train.x=subset(train,select=-Target) train.y=as.factor(train$Target) test.x=subset(test,select=-Target) test.y=as.factor(test$Target) predict.test=knn(train.x,test.x,train.y,k=i) temp.val[j]=sum(predict.test != test.y)/175} pred.error[i]=mean(temp.val)} all.dat=data.frame(cbind(k.attempts,pred.error)) ggplot(all.dat,aes(x=k.attempts,y=pred.error))+geom_line()+labs(x=&quot;Values for k&quot;,y=&quot;Test error&quot;) trainx=train.x trainy=train.y testx=test.x testy=test.y 5.1.1 K-nn in Python from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import accuracy_score xtrain_py=r.trainx xtest_py=r.testx ytrain_py=r.trainy ytest_py=r.testy knn3 = KNeighborsClassifier(n_neighbors = 3) knn3.fit(xtrain_py, ytrain_py) #sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}KNeighborsClassifier(n_neighbors=3)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.KNeighborsClassifierKNeighborsClassifier(n_neighbors=3) y_pred_3 = knn3.predict(xtest_py) print(&quot;Accuracy with k=3&quot;, accuracy_score(ytest_py, y_pred_3)*100) ## Accuracy with k=3 96.57142857142857 5.2 MDS Multidimensional Scaling is an alternative to PCA in terms of visualizing high dimensional data in a lower dimension. IF you will be using this data for future analysis (for example, clustering), then PCA would be recommended. However, if you are trying to visualize your data, MDS is a good alternative that can be explored! The nice thing about MDS is that it does provide some measures of how it does when it reduces the dimension. For example, in classical MDS, you get a measure for the goodness-of-fit (want this number closer to 1…would at least like 0.8). When performing non-metric MDS, you can get the stress of reduction (want this number close to 0). pca_ex=prcomp(arrest.scal,scale=F) pve = 100 *pca_ex$sdev^2/sum(pca_ex$sdev^2) plot(cumsum(pve),type=&quot;l&quot;) graph.pca=data.frame(cbind(pca_ex$x[,1:2])) colnames(graph.pca)=c(&quot;PCA1&quot;,&quot;PCA2&quot;) graph.pca$PCA1=as.numeric(graph.pca$PCA1) graph.pca$PCA2=as.numeric(graph.pca$PCA2) ggplot(graph.pca,aes(x=PCA1,y=PCA2))+geom_point()+labs(y=&quot;PCA2&quot;,x=&quot;PCA1&quot;,title=&quot;PCA visualization&quot;) d=dist(arrest.scal) mds_ex=cmdscale(d,eig=TRUE, k=2) graph.mds=data.frame(mds_ex$points) colnames(graph.mds)=c(&quot;MDS1&quot;,&quot;MDS2&quot;) graph.mds$MDS1=as.numeric(graph.mds$MDS1) graph.mds$MDS2=as.numeric(graph.mds$MDS2) ggplot(graph.mds,aes(x=MDS1,y=MDS2))+geom_point()+labs(y=&quot;MDS2&quot;,x=&quot;MDS1&quot;,title=&quot;metric MDS visualization&quot;) ex_MDS= NCI60$data pca_ex=prcomp(ex_MDS,scale=T) pve = 100 *pca_ex$sdev^2/sum(pca_ex$sdev^2) plot(cumsum(pve),type=&quot;l&quot;) graph.pca=data.frame(cbind(pca_ex$x[,1:2],as.character(NCI60$labs))) colnames(graph.pca)=c(&quot;PCA1&quot;,&quot;PCA2&quot;,&quot;cancer&quot;) graph.pca$PCA1=as.numeric(graph.pca$PCA1) graph.pca$PCA2=as.numeric(graph.pca$PCA2) ggplot(graph.pca,aes(x=PCA1,y=PCA2,color=cancer))+geom_point()+labs(y=&quot;PCA2&quot;,x=&quot;PCA1&quot;,title=&quot;PCA visualization&quot;) d=dist(ex_MDS) mds_ex=cmdscale(d,eig=TRUE, k=2) graph.mds=data.frame(cbind(mds_ex$points,as.character(NCI60$labs))) colnames(graph.mds)=c(&quot;MDS1&quot;,&quot;MDS2&quot;,&quot;cancer&quot;) graph.mds$MDS1=as.numeric(graph.mds$MDS1) graph.mds$MDS2=as.numeric(graph.mds$MDS2) ggplot(graph.mds,aes(x=MDS1,y=MDS2,color=cancer))+geom_point()+labs(y=&quot;MDS2&quot;,x=&quot;MDS1&quot;,title=&quot;metric MDS visualization&quot;) mds_ex=isoMDS(d, k=2) ## initial value 30.903164 ## iter 5 value 20.778162 ## iter 5 value 20.760297 ## iter 5 value 20.750556 ## final value 20.750556 ## converged graph.mds=data.frame(cbind(mds_ex$points,as.character(NCI60$labs))) colnames(graph.mds)=c(&quot;MDS1&quot;,&quot;MDS2&quot;,&quot;cancer&quot;) graph.mds$MDS1=as.numeric(graph.mds$MDS1) graph.mds$MDS2=as.numeric(graph.mds$MDS2) ggplot(graph.mds,aes(x=MDS1,y=MDS2,color=cancer))+geom_point()+labs(y=&quot;MDS2&quot;,x=&quot;MDS1&quot;,title=&quot;non-metric MDS visualization&quot;) labs_NCI60=NCI60$labs 5.2.1 MDS in Python from sklearn.manifold import MDS import matplotlib.pyplot as plt import pandas as pd import seaborn as sns NCI60_py=r.ex_MDS NCI60_labs=r.labs_NCI60 labs=pd.DataFrame(NCI60_labs,columns=[&#39;Cancer&#39;]) mds_py=MDS() x_metric=mds_py.fit_transform(NCI60_py) ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\sklearn\\manifold\\_mds.py:298: FutureWarning: The default value of `normalized_stress` will change to `&#39;auto&#39;` in version 1.4. To suppress this warning, manually set the value of `normalized_stress`. ## warnings.warn( temp=pd.DataFrame(x_metric,columns=[&#39;MDS1&#39;,&#39;MDS2&#39;]) plot_metric=pd.concat([labs,temp],axis=1) sns.relplot(data=plot_metric,x=&#39;MDS1&#39;,y=&#39;MDS2&#39;,hue=&#39;Cancer&#39;) plt.show() mds2_py=MDS(metric=False,normalized_stress=True) x_nonmetric=mds2_py.fit_transform(NCI60_py) temp1=pd.DataFrame(x_nonmetric,columns=[&#39;MDS1&#39;,&#39;MDS2&#39;]) plot_nonmetric=pd.concat([labs,temp1],axis=1) sns.relplot(data=plot_nonmetric,x=&#39;MDS1&#39;,y=&#39;MDS2&#39;,hue=&#39;Cancer&#39;) plt.show() stress = mds2_py.stress_ print(stress) ## 0.29544119720288964 Note that the stress value should only be calculated for nonMetric MDS. From the scikit-learn.org webpage “A value of 0 indicates”perfect” fit, 0.025 excellent, 0.05 good, 0.1 fair, and 0.2 poor [1]“. Thus, this projection was not that good. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
